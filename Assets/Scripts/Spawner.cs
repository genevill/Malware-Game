using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Spawner : MonoBehaviour
{
    // An instance of the ScriptableObject defined above.
    public SpawnManagerScriptableObject spawnManagerValues;
    public PrefabTrackerScriptableObject prefabTrackerValues;

    // This will be appended to the name of the created entities and increment when each is created.
    private int instanceNumber = 1;
    private readonly bool spawnEnemies = true;

    void Start()
    {
        prefabTrackerValues.enemies = new List<GameObject>();
        StartCoroutine(SpawnEnemies());
    }

    /*void SpawnEntities()
    {
        for (int i = 0; i < spawnManagerValues.numberOfPrefabsToCreate; i++)
        {
            int rand = Random.Range(0,5);
            // Creates an instance of the prefab at the current spawn point.
            GameObject currentEntity = Instantiate(spawnManagerValues.entityToSpawn[rand], SpawnPoint(spawnManagerValues.radius), Quaternion.identity);

            // Sets the name of the instantiated entity to be the string defined in the ScriptableObject and then appends it with a unique number. 
            currentEntity.name += instanceNumber;
            prefabTrackerValues.enemies.Add(currentEntity);
            instanceNumber++;
        }
    }*/

    Vector2 SpawnPoint(int radius)
    {
        int angle = Random.Range(1, 361);
        Vector2 spawnPoint = new Vector2(radius * Mathf.Cos(angle), radius * Mathf.Sin(angle));
        if ((spawnPoint.x > 48 || spawnPoint.x < -48) || (spawnPoint.y > 48 || spawnPoint.y < -48))
            spawnPoint = SpawnPoint(radius);
        return spawnPoint;
    }

    IEnumerator SpawnEnemies()
    {
        while (spawnEnemies)
        {
            yield return new WaitForSeconds(spawnManagerValues.repeatRate);
            int rand = Random.Range(0,5);
            GameObject currentEntity = Instantiate(spawnManagerValues.entityToSpawn[rand], SpawnPoint(spawnManagerValues.radius), Quaternion.identity);
            // Sets the name of the instantiated entity to be the string defined in the ScriptableObject and then appends it with a unique number. 
            currentEntity.name += instanceNumber;
            prefabTrackerValues.enemies.Add(currentEntity);
            instanceNumber++;
        }
    }
}