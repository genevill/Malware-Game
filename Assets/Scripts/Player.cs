using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class Player : MonoBehaviour
{
    public Slider healthSlider;
    public Slider shieldSlider;
    private GameManager gameManager;
    public PlayerClass myPlayer;
    private PlayerFire fireScript;
    private PowerUpScriptableObject powerUpValues;
    private Shield shieldScript;
    private readonly float damageDelay = 0.1f;
    private bool isInvincible = false;

    // Start is called before the first frame update
    void Start()
    {
        myPlayer = new PlayerClass();
        healthSlider.maxValue = myPlayer.MaxHealth;
        shieldSlider.maxValue = myPlayer.MaxShield;
        UpdateHealth(myPlayer.CurrentHealth);
        UpdateShield(myPlayer.CurrentShield);
        fireScript = GetComponent<PlayerFire>();
        gameManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<GameManager>();
        shieldScript = GetComponentInChildren<Shield>();
    }

    private void Update()
    {
        fireScript.Fire(myPlayer.FireSpeed, myPlayer.ProjectileSpeed, myPlayer.Damage, myPlayer.Projectile);
        if (myPlayer.CurrentHealth <= 0)
            gameManager.GameOver();
        gameManager.UpdateScore(myPlayer.Score);
        if(PlayerClass.playerDefaults.maxHealth != myPlayer.MaxHealth)
        {
            myPlayer.MaxHealth = PlayerClass.playerDefaults.maxHealth;
            myPlayer.MaxShield = PlayerClass.playerDefaults.maxShield;
        }
    }

    // Update is called once per frame
    void UpdateHealth(float currentHealth)
    {
        healthSlider.value = currentHealth;
    }

    public void UpdateShield(float currentShield)
    {
        shieldSlider.value = currentShield;
    }

    public void TakeDamage(float damage)
    {
        if (!isInvincible && myPlayer.CurrentShield <= 0)
        {
            myPlayer.CurrentHealth -= damage;
            UpdateHealth(myPlayer.CurrentHealth);
            StartCoroutine(DamageDelay());
        }
        else if (!isInvincible && myPlayer.CurrentShield > 0)
        {
            myPlayer.CurrentShield -= damage;
            UpdateShield(myPlayer.CurrentShield);
            shieldScript.ShieldActions(myPlayer.CurrentShield);
        }
    }

    public void Heal(float healAmount)
    {
        myPlayer.CurrentHealth += healAmount;
        UpdateHealth(myPlayer.CurrentHealth);
    }

    public void RegenShields(float shieldRegenAmount)
    {
        if (myPlayer.CurrentShield <= myPlayer.MaxShield)
        {
            myPlayer.CurrentShield += shieldRegenAmount;
            UpdateShield(myPlayer.CurrentShield);
        }
        else if (myPlayer.CurrentShield >= myPlayer.MaxShield)
        {
            myPlayer.CurrentShield = myPlayer.MaxShield;
            shieldScript.StopRegen();
        }
    }

    private void OnCollisionStay2D(Collision2D collision)
    {
        if(collision.gameObject.CompareTag("Enemy"))
        {
            TakeDamage(collision.gameObject.GetComponent<Enemy>().enemyValues.damage);
        }
    }

   public void PowerUpCollision(GameObject other)
    {
        StopCoroutine(nameof(PowerUpTimer));
        powerUpValues = other.GetComponent<PowerUp>().powerUpValues;
        other.GetComponent<Renderer>().enabled = false;
        other.transform.position = new Vector3(90, 0, 0);
        StartCoroutine(PowerUpTimer(myPlayer, other));
        StartCoroutine(DestroyTimer(other));
        Destroy(other);
    }

    public void HealthPackCollision(float healAmount, GameObject other)
    {
        Heal(healAmount);
        Destroy(other);
    }

    IEnumerator DamageDelay()
    {
        isInvincible = true;
        yield return new WaitForSeconds(damageDelay);
        isInvincible = false;
    }

    IEnumerator DestroyTimer(GameObject powerUp)
    {
        yield return new WaitForSeconds(powerUpValues.timer);
        Destroy(powerUp);
    }

    IEnumerator PowerUpTimer(PlayerClass player, GameObject powerUp)
    {
        powerUp.GetComponent<PowerUp>().PowerUpActions(player, powerUpValues.projectile, powerUpValues.fireSpeed, powerUpValues.maxHealth, powerUpValues.moveSpeed, powerUpValues.damage);
        yield return new WaitForSeconds(powerUpValues.timer);
        myPlayer.RestoreDefaults();
    }
}
