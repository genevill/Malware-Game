using System.Collections;
using UnityEngine;

public class Enemy : MonoBehaviour
{
    private GameObject player;
    private PlayerClass myPlayer;
    public EnemyScriptableObject enemyValues;
    public PowerUpListScriptableObject powerUpList;
    public float currentHealth;
    private EnemyHealthBar enemyHealthBar;
    public bool isMoving = true;
    private Rigidbody2D rb;
    public GameObject projectile;
    public bool readyToFire = true;
    private float fireSpeed = 0.1f;

    void Start()
    {
        currentHealth = enemyValues.maxHealth;
        player = GameObject.FindGameObjectWithTag("Player");
        myPlayer = player.GetComponent<Player>().myPlayer;
        enemyHealthBar = GetComponent<EnemyHealthBar>();
        rb = GetComponent<Rigidbody2D>();
        StartCoroutine(FireSpeed());
    }
    // Update is called once per frame
    void Update()
    {
        gameObject.GetComponent<Animator>().GetBool("isShooting");
    }

    private void FixedUpdate()
    {
        if(isMoving)
            rb.AddForce(transform.up * enemyValues.moveSpeed);
    }

    public void RotateTowardsTarget()
    {
        var offset = -90f;
        Vector2 direction = player.transform.position - transform.position;
        direction.Normalize();
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;       
        transform.rotation = Quaternion.Euler(Vector3.forward * (angle + offset));
    }

    public void UpdateHealth(float damage)
    {

        currentHealth -= damage;
        enemyHealthBar.UpdateHealthBar(currentHealth);
    }

    public void HealthCheck()
    {
        if (currentHealth <= 0)
        {
            int lootRoll = Random.Range(0, 101);
            int randomPowerup = Random.Range(0, powerUpList.powerUps.Length);
            if (lootRoll > 80)
            {
                Instantiate(powerUpList.powerUps[randomPowerup], transform.position, powerUpList.powerUps[randomPowerup].transform.rotation);
            }
            myPlayer.Score += enemyValues.points;
            Destroy(gameObject);
        }
    }

    public void Move()
    {
        transform.position = Vector2.MoveTowards(transform.position, player.transform.position, enemyValues.moveSpeed * Time.deltaTime);
    }

    public void Fire(float fSpeed, float projSpeed, float projDamage, GameObject enemyProj)
    {
        fireSpeed = fSpeed;
        if (readyToFire)
        {
            GameObject projectile = Instantiate(enemyProj, transform.position, transform.rotation);
            projectile.GetComponent<EnemyProjectile>().moveSpeed = projSpeed;
            projectile.GetComponent<EnemyProjectile>().damage = projDamage;
            readyToFire = false;
        }
    }

    IEnumerator FireSpeed()
    {
        while (true)
        {
            yield return new WaitForSeconds(fireSpeed);
            readyToFire = true;
        }
    }


}
